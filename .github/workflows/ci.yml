name: "CI: Lint, Typecheck, Test, Build"

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  build:
    name: "CI: Lint, Typecheck, Test, Build & Budgets"
    runs-on: ubuntu-latest
    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
      SENTRY_URL: ${{ secrets.SENTRY_URL }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - run: npm ci
      - name: Lint changed files only (PRs)
        if: ${{ github.event_name == 'pull_request' }}
        run: npm run lint:changed
      - run: npm run typecheck
      - run: npm test --silent -- --ci
      - run: npm run build
      - name: Check bundle budgets
        run: npm run check:bundle
      - name: Security audit (fail on high/critical)
        run: npm audit --omit=dev --audit-level=high
      - name: Upload coverage artifact (if present)
        if: ${{ always() && hashFiles('coverage/**') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage
      - name: Upload build artifact (if present)
        if: ${{ always() && hashFiles('.next/**') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: next-build
          path: .next
      - name: Upload Sentry sourcemaps (optional)
        if: ${{ env.SENTRY_AUTH_TOKEN != '' && env.SENTRY_ORG != '' && env.SENTRY_PROJECT != '' }}
        env:
          SENTRY_AUTH_TOKEN: ${{ env.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ env.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ env.SENTRY_PROJECT }}
          SENTRY_URL: ${{ env.SENTRY_URL }}
          SENTRY_ENV: preview
        run: npx sentry-cli sourcemaps upload --org "$SENTRY_ORG" --project "$SENTRY_PROJECT" .next
      - name: Deploy Vercel preview (optional)
        if: ${{ github.event_name == 'pull_request' && env.VERCEL_TOKEN != '' && env.VERCEL_ORG_ID != '' && env.VERCEL_PROJECT_ID != '' }}
        env:
          VERCEL_TOKEN: ${{ env.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ env.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ env.VERCEL_PROJECT_ID }}
        run: npx vercel --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID" --confirm --prod=false || true
      - name: Check for legacy button/input classes in settings
        run: |
          rg -n "btn-primary|btn-secondary|btn-ghost|input-field" "app/(authed)/settings" && echo "Legacy inputs/buttons in settings. Use shadcn/ui components." && exit 1 || exit 0
      - name: Check for legacy card class in admin
        run: |
          rg -n -P "className=\"[^\"]*\scard\s|className=\"card\s|className=\"[^\"]*\scard\"" app/admin \
            && echo "Legacy .card containers in admin. Use <Card>." && exit 1 || exit 0
      - name: Check for legacy buttons in admin
        run: |
          rg -n "btn-primary|btn-secondary|btn-ghost" app/admin && echo "Legacy button classes in admin. Use <Button>." && exit 1 || exit 0
      - name: Repo-wide legacy buttons/inputs (app + components)
        run: |
          rg -n "btn-primary|btn-secondary|btn-ghost|input-field" app components && echo "Legacy classes found. Please migrate to shadcn/ui." && exit 1 || exit 0
      - name: Block legacy card class usage repo-wide
        run: |
          rg -n -P "className=\"[^\"]*\scard\s|className=\"card\s|className=\"[^\"]*\scard\"" app \
            && echo "Legacy .card class found. Use <Card> or token-aligned styles." && exit 1 || exit 0
